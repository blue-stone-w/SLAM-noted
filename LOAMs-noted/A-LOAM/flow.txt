Scanregistration
{
  回调函数 : laserCloud Handler
  {
    排除无效点;
    初始和结束点的方向;
    计算点云中每一个点的水平角和俯仰角;
    二位矩阵的点放入一维数组;
    计算和存储点的曲率和索引;
    按行处理点云
    {
      分为6个等份提取特征
      {
        按曲率排序  
          挑选边缘点(物理空间意义的周围点避免选取)  
          挑选平面点(物理空间意义的周围点避免选取)
          剩余的未选取的点放入LessFlat
      } 
      降采样LessFlat点
    } 分别发布当前点云、四种特征点云
    如果需要发送每一个行,
    则发送每一个行
  }
  如果需要发送每一个行, 则保存每一个行
}

laserOdometry
{
  订阅四种点和所有点, 并放入相应的队列;
  每个消息为一个点云;
  发布两种点、全部点、Odometry和path
  循环处理
  {
    如果(5种点都有)
    {
      根据点的时间判断是否为同一帧
      如果已经初始化
      {
        进行两次迭代
        {
          ceres
          寻找角点的约束
          {
            运动补偿至起始时刻
            寻找最近的一个点
            如果最近点的距离小于阈值
            {
              向上找另一个点
              向下找另一个点
            } 
            如果两个点都有效
            {
              记录pab三个点
              建立cost_function
              {
                实例化LidarEdgeFactor
                {
                  create函数
                  {
                    AutoDiffCostFunction
                    {
                      (括号重载
                       三个点的坐标
                       平移和旋转的线性插值
                       a到当前点的向量 X b到当前点的向量
                       b到a的向量
                       计算点到直线的残差(残差为向量; 残差的模是该点到底边的垂线长度, 即该点到对应的面 / 线特征的距离)
                      )
                    }
                  }
                }
              } 
              添加残差项
            }
          } 
          寻找平面点的约束
          {
            
            运动补偿至起始时刻
            寻找最近的一个点
            如果最近点的距离小于阈值
            {
              向上找另外的点 : 确保三个点不会水平或竖直共线
              向下找另外的点 : 确保三个点不会水平或竖直共线
            } 
            如果三个点都有效
            {
              记录pjlm四个点
              建立cost_function
              {
                实例化LidarSurfFactor
                {                  
                  create函数
                  {
                    AutoDiffCostFunction
                    {
                      (括号重载
                       平面的单位法向量
                       : l到j的向量 X m到j的向量
                       平移和旋转的线性插值
                       计算点到平面的残差(向量机票·单位法向量 = 点到平面的距离, 为标量)
                      )
                    }
                  }
                }
              } 
              添加残差项
            }
          } 
          求解的选项
          使用稠密矩阵的求解方法(因为此处的矩阵为稠密矩阵)
          求解器类型;
          最大迭代次数;
          不stdout
        }
        得到优化的平移和旋转(里程计位姿)
      }
      发布里程计位姿
      里程计位姿放入laserPath, 并发布laserPath给ros用于rviz 是否把lesssharp、lessflat、fullres变换到末尾时刻 当前帧的点改为上一帧, 用上一帧的点覆盖当前帧 如果向后端发送特征点{发送两种特征点和全部点} 帧的计数自增
    } // 判断点云非空后的处理完成
  }
}

laserMapping
{
  订阅两种特征点、里程计、全部点云，并放入相应的队列
  建立空的点云数组
  std::thread mapping_process{process}
  { // 主处理线程
    循环处理
    {
      循环处理如果三种点和里程计都有
      {
        以corner buffer为基准删除老旧的点云数据
        若点云为空, 退出循环
        判断时间戳一致性
        点云转换为pcl的数据格式
        lidarodometry数据转换为eigen数据，删除已经转换的odom数据
        清理corner buffer
        世界坐标系下的位姿 = 地图坐标系和里程计坐标系的变换 * 里程计在世界坐标系下的位姿(后端优化的初值)
        建立局部栅格地图(大局部地图 : 21 * 21 * 11)
        若当前点接近局部地图边界
        {(以右边界为例)
          取出最右端点云
          整体右移
          最左边的栅格赋值了之前最右边的栅格
          清空最右端点云(指针操作)
          索引右移,
          偏移量增加 
        }
        // 此处相同处理另外5个地图更新
        // 此处完成局部栅格地图的更新，保证当前帧不会在局部地图的边缘，才可以从地图中获取足够的约束
        选取周围栅格(250 * 250 * 100) 存入edge和surf点云, 并下采样
        若点云数量足够
        {
          点云传入kd树
          迭代两次得到对应关系
          {
            建立ceres问题
            构建角点相关的约束
            {
              里程计坐标系下的坐标转换为地图坐标系下的坐标
              在小局部地图中寻找最近的5个点
              若距离都足够小
              {
                计算最近点的中心
                构建最近点的协方差矩阵
                计算特征值和特征向量
                若5点共线
                {
                  根据拟合的直线构建两个虚拟点
                  构建ceres约束
                }
              }
            } 
            构建面点相关的约束
            {
              里程计坐标系下的坐标转换为地图坐标系下的坐标
              在小局部地图中寻找最近的5个点
              建立5个平面方程的坐标矩阵A和常数矩阵B
              若距离都足够小
              {
                赋值坐标矩阵A
                使用eigen计算平面单位法向量
                点到拟合的平面的距离大于阈值说明拟合失败
                利用平面方程构建约束
              }
            } 
            调用ceres求解
          }
        } 
        地图坐标系和里程计坐标系的变换 = 世界坐标系下的位姿 / 里程计在世界坐标系下的位姿
        把优化后的当前帧点加到局部地图中
        {
          位姿投影到地图坐标系
          这个点所在栅格的索引
          索引为越界则更新地图
          {
            计算在一维数组中的索引
            把当前点放入大局部地图
          }
        } 
        下采样小局部地图 每隔5帧发布小局部地图 每隔20帧发布一次大局部地图 FullRes点投影到地图坐标系 发布当前位姿odomAftMapped 发布轨迹,
        用于rviz可视化laserAfterMappedPose 发布tf 
      } 
      暂停2毫秒
    }
  }
}
